//
// interiormapping_words.mxsl
//

filename wall1 = "C:/Users/jaket/Pictures/left_wall_3.png";
filename wall2 = "C:/Users/jaket/Pictures/right_wall_3.png";
filename wall3 = "C:/Users/jaket/Pictures/back_wall_3.png";
filename ceilg = "C:/Users/jaket/Pictures/ceiling_3.png";
filename floor = "C:/Users/jaket/Pictures/floor_3.png";

float raycast(vec3 origin, vec3 view_dir)
{
    vec3 dn = (-origin - 1.0) / view_dir;
    vec3 dp = (-origin + 1.0) / view_dir;
    vec3 d_min = max(dn, dp);
    float d_min_z = if (dp.z > 0.0) { dp.z } else { 1000000.0 };
    return min(d_min.x, d_min.y, d_min_z);
}

surfaceshader main()
{
    // initialize data
    vec2 uv = texcoord();
    vec3 view_dir = -viewdirection("object");
    vec3 origin = vec3(uv * 2.0 - 1.0, -1.0);

    // perform raycast
    float room_dist = raycast(origin, view_dir);

    vec3 room_pos = origin + view_dir * room_dist;
    room_pos.z *= -1.0;

    vec3 wall_uvs = 1.0 - (room_pos + 1.0) / 2.0;

    // paint walls
    color4 words = color4();
    words = if (room_pos.x >  0.99) { image(wall1, texcoord=wall_uvs.zy) };
    words = if (room_pos.y < -0.99) { image(ceilg, texcoord=vec2(wall_uvs.x, -wall_uvs.z)) };
    words = if (room_pos.x < -0.99) { image(wall2, texcoord=vec2(-wall_uvs.z, wall_uvs.y)) };
    words = if (room_pos.z < -0.99) { image(wall3, texcoord=wall_uvs.xy) };
    words = if (room_pos.y >  0.99) { image(floor, texcoord=wall_uvs.xz) };

    // ambient occlusion
    float ao = 1.0 - clamp(distance(vec3(0.0), room_pos) - 0.9);

    // use standard surface
    surfaceshader surface = standard_surface();
    surface.base_color = clamp(color3(wall_uvs) + words.rgb) * ao;
    surface.specular_roughness = 1.0;

    return surface;
}

vector2 main__uv = texcoord();
vector3 node1 = viewdirection(space="object");
vector3 main__view_dir = vector3(0.0, 0.0, 0.0) - node1;
vector2 node6 = main__uv * 2.0;
vector2 node8 = node6 - 1.0;
float node9 = node8[0];
float node10 = node8[1];
float node12 = 0.0 - 1.0;
vector3 main__origin = vector3(node9, node10, node12);
vector3 node14 = vector3(0.0, 0.0, 0.0) - main__origin;
vector3 node16 = node14 - 1.0;
vector3 raycast__dn = node16 / main__view_dir;
vector3 node19 = vector3(0.0, 0.0, 0.0) - main__origin;
vector3 node21 = node19 + 1.0;
vector3 raycast__dp = node21 / main__view_dir;
vector3 raycast__d_min = max(in1=raycast__dn, in2=raycast__dp);
float node26 = raycast__dp[2];
float node28 = if (node26 > 0.0) { 1.0 } else { 0.0 };
float node30 = raycast__dp[2];
float raycast__d_min_z = if (node28 == 1.0) { node30 } else { 1000000.0 };
float min__in1 = raycast__d_min[0];
float min__in2 = raycast__d_min[1];
float min__in7 = min(in1=min__in2, in2=raycast__d_min_z);
float main__room_dist = min(in1=min__in1, in2=min__in7);
vector3 node41 = main__view_dir * main__room_dist;
vector3 main__room_pos = main__origin + node41;
float node43 = main__room_pos[2];
float node45 = 0.0 - 1.0;
float node46 = node43 * node45;
float node47 = main__room_pos[0];
float node48 = main__room_pos[1];
float node49 = main__room_pos[2];
vector3 main__room_pos2 = vector3(node47, node48, node46);
vector3 node53 = main__room_pos2 + 1.0;
vector3 node55 = node53 / 2.0;
vector3 node56 = vector3(1.0);
vector3 main__wall_uvs = node56 - node55;
float node58 = main__room_pos2[0];
float node60 = if (node58 > 0.99) { 1.0 } else { 0.0 };
float node65 = main__wall_uvs[2];
float node66 = main__wall_uvs[1];
vector2 image__texcoord = vector2(node65, node66);
color4 node61 = image(file="textures\left_wall.png", texcoord=image__texcoord);
color4 main__words2 = if (node60 == 1.0) { node61 } else { color4(0.0, 0.0, 0.0, 0.0) };
float node74 = main__room_pos2[1];
float node76 = 0.0 - 0.99;
float node77 = if (node76 >= node74) { 1.0 } else { 0.0 };
float node80 = main__wall_uvs[0];
float node82 = main__wall_uvs[2];
float node83 = 0.0 - node82;
vector2 image__texcoord2 = vector2(node80, node83);
color4 node78 = image(file="textures\ceiling.png", texcoord=image__texcoord2);
color4 main__words3 = if (node77 == 1.0) { node78 } else { main__words2 };
float node93 = main__room_pos2[0];
float node95 = 0.0 - 0.99;
float node96 = if (node95 >= node93) { 1.0 } else { 0.0 };
float node99 = main__wall_uvs[2];
float node100 = 0.0 - node99;
float node102 = main__wall_uvs[1];
vector2 image__texcoord3 = vector2(node100, node102);
color4 node97 = image(file="textures\right_wall.png", texcoord=image__texcoord3);
color4 main__words4 = if (node96 == 1.0) { node97 } else { main__words3 };
float node112 = main__room_pos2[2];
float node114 = 0.0 - 0.99;
float node115 = if (node114 >= node112) { 1.0 } else { 0.0 };
float node118 = main__wall_uvs[0];
float node119 = main__wall_uvs[1];
vector2 image__texcoord4 = vector2(node118, node119);
color4 node116 = image(file="textures\back_wall.png", texcoord=image__texcoord4);
color4 main__words5 = if (node115 == 1.0) { node116 } else { main__words4 };
float node129 = main__room_pos2[1];
float node131 = if (node129 > 0.99) { 1.0 } else { 0.0 };
float node134 = main__wall_uvs[0];
float node135 = main__wall_uvs[2];
vector2 image__texcoord5 = vector2(node134, node135);
color4 node132 = image(file="textures\floor.png", texcoord=image__texcoord5);
color4 main__words6 = if (node131 == 1.0) { node132 } else { main__words5 };
vector3 distance__in1 = vector3(0.0);
float node146 = distance(in1=distance__in1, in2=main__room_pos2);
float clamp__in = node146 - 0.9;
float node150 = clamp(in=clamp__in);
float main__ao = 1.0 - node150;
color3 node197 = color3(main__wall_uvs);
float node199 = main__words6[0];
float node200 = main__words6[1];
float node201 = main__words6[2];
color3 node202 = color3(node199, node200, node201);
color3 clamp__in2 = node197 + node202;
color3 node203 = clamp(in=clamp__in2);
color3 node208 = node203 * main__ao;
surfaceshader main__surface = standard_surface(base_color=node208, specular_roughness=1.0);
//material mxsl_material = {"surfacematerial", material: surfaceshader=main__surface};

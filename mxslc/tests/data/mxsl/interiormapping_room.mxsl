//
// interiormapping_room.mxsl
//

filename wall1_file = "C:/Users/jaket/Pictures/left_wall_2.jpg";
filename wall2_file = "C:/Users/jaket/Pictures/right_wall_2.jpg";
filename wall3_file = "C:/Users/jaket/Pictures/back_wall_2.jpg";
filename ceilg_file = "C:/Users/jaket/Pictures/ceiling_2.jpg";
filename floor_file = "C:/Users/jaket/Pictures/floor_2.jpg";
filename table_file = "C:/Users/jaket/Pictures/table_scaled.jpg";

float raycast(vec3 origin, vec3 view_dir)
{
    vec3 dn = (-origin - 1.0) / view_dir;
    vec3 dp = (-origin + 1.0) / view_dir;
    vec3 d_min = max(dn, dp);
    float d_min_z = if (dp.z > 0.0) { dp.z } else { 1000000.0 };
    return min(d_min.x, d_min.y, d_min_z);
}

float raycast_midplane(vec3 origin, vec3 view_dir, float depth)
{
    float d = (-origin.z + depth) / view_dir.z;
    return if (d > 0.0) { d } else { 1000000.0 };
}

surfaceshader main()
{
    // initialize data
    vec2 uv = texcoord();
    vec3 view_dir = -viewdirection("object");
    vec3 origin = vec3(uv * 2.0 - 1.0, -1.0);

    // do raycast
    float room_dist = raycast(origin, view_dir);
    vec3 room_pos = origin + view_dir * room_dist;
    room_pos.z *= -1.0;

    vec3 wall_uvs = 1.0 - (room_pos + 1.0) / 2.0;

    // paint walls
    color4 walls = color4();
    walls = if (room_pos.x >  0.99) { image(wall1_file, wall_uvs.zy) };
    walls = if (room_pos.y < -0.99) { image(ceilg_file, vec2(wall_uvs.x, -wall_uvs.z)) };
    walls = if (room_pos.x < -0.99) { image(wall2_file, vec2(-wall_uvs.z, wall_uvs.y)) };
    walls = if (room_pos.z < -0.99) { image(wall3_file, wall_uvs.xy) };
    walls = if (room_pos.y >  0.99) { image(floor_file, wall_uvs.xz) };

    // do midplane raycast
    float midplane_dist = raycast_midplane(origin, view_dir, 0.0);
    vec3 midplane_pos = origin + view_dir * midplane_dist;
    midplane_pos.y *= -1.0;

    // place table
    color4 table = image(table_file, (midplane_pos.xy + 1.0) / 2.0);

    // combine walls and table
    color4 room = color4();
    room = if (table.b < 0.25) { table } else { walls };
    room = if (midplane_dist < room_dist) { room } else { walls };

    // use standard surface
    surfaceshader surface = standard_surface();
    surface.base_color = room.rgb;
    surface.specular_roughness = 1.0;

    return surface;
}

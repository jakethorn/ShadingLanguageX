#define WAVE_ITERATIONS 12.0
#define DRAG_MULT 0.38

vec2 wave_dx(vec2 pos, vec2 dir, float freq, float time)
{
    float x = dotproduct(dir, pos) * freq + time;
    float wave = exp(sin(x) - 1.0);
    float dx = wave * cos(x);
    return vec2(wave, -dx);
}

float get_waves(vec2 pos)
{
    float wave_phase_shift = magnitude(pos) * 0.1;
    float iter = 0.0;
    float freq = 1.0;
    float time_mult = 2.0;
    float weight = 1.0;
    float sum_of_values = 0.0;
    float sum_of_weights = 0.0;

    for (float i = 0.0:WAVE_ITERATIONS)
    {
        vec2 p = vec2(sin(iter), cos(iter));
        vec2 res = wave_dx(pos, p, freq, time() * time_mult + wave_phase_shift);
        pos += p * res.y * weight * DRAG_MULT;
        sum_of_values += res.x * weight;
        sum_of_weights += weight;
        weight = mix(weight, 0.0, 0.2);
        freq *= 1.18;
        time_mult *= 1.07;

        iter += 1232.399963;
    }

    return sum_of_values / sum_of_weights;
}

void main()
{
    float wave_height = get_waves(position("world").xz * 10.0);
    surfaceshader surface = standard_surface();
    surface.base_color = color3(0.1, 0.25, 0.5);
    surface.specular_roughness = 0.2;

    displacement(vec3(0.0, 0.0, 1.0), wave_height / 5.0);
}